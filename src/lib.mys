class StringBuilder:
    _data: [char]

    def __init__(self):
        self._data = []

    def __iadd__(self, data: string):
        for ch in data:
            self += ch

    def __iadd__(self, data: char):
        self._data.append(data)

    def __iadd__(self, data: i8):
        self += str(data)

    def __iadd__(self, data: i16):
        self += str(data)

    def __iadd__(self, data: i32):
        self += str(data)

    def __iadd__(self, data: i64):
        self += str(data)

    def __iadd__(self, data: u8):
        self += str(data)

    def __iadd__(self, data: u16):
        self += str(data)

    def __iadd__(self, data: u32):
        self += str(data)

    def __iadd__(self, data: u64):
        self += str(data)

    def to_string(self) -> string:
        """Returns a string of current data.

        """

        return "".join([str(ch) for ch in self._data])

    def __len__(self) -> u64:
        """Get current string length.

        """

        return u64(len(self._data))

    def clear(self):
        """Clear everything.

        """

        self._data = []

    def clear_from(self, offset: u64):
        """Clear everything after given offset.

        """

        while u64(len(self)) > offset:
            self._data.pop()

@test
def test_empty():
    assert StringBuilder().to_string() == ""

@test
def test_append():
    numbers = StringBuilder()
    numbers += "string"
    numbers += " "
    numbers += i8(-1)
    numbers += " "
    numbers += i16(-2)
    numbers += " "
    numbers += i32(-3)
    numbers += " "
    numbers += i64(-4)
    numbers += " "
    numbers += u8(1)
    numbers += " "
    numbers += u16(2)
    numbers += " "
    numbers += u32(3)
    numbers += " "
    numbers += u64(4)
    numbers += " "
    numbers += 'C'

    assert numbers.to_string() == "string -1 -2 -3 -4 1 2 3 4 C"

@test
def test_clear():
    numbers = StringBuilder()
    numbers += "foo"
    assert numbers.to_string() == "foo"

    numbers.clear()
    assert numbers.to_string() == ""

@test
def test_clear_from_and_length():
    numbers = StringBuilder()
    assert len(numbers) == 0
    numbers.clear_from(1)
    assert len(numbers) == 0

    numbers += "foo"
    assert numbers.to_string() == "foo"
    assert len(numbers) == 3

    numbers.clear_from(1)
    assert numbers.to_string() == "f"
    assert len(numbers) == 1

    numbers += "a"
    assert numbers.to_string() == "fa"

    numbers.clear_from(0)
    assert numbers.to_string() == ""
    assert len(numbers) == 0

    numbers += "apa"
    assert numbers.to_string() == "apa"
    assert len(numbers) == 3
