class StringBuilder:
    _data: [char]

    def __init__(self):
        self._data = []

    def __iadd__(self, data: string):
        if data is None:
            return

        for ch in data:
            self += ch

    def __iadd__(self, data: char):
        self._data.append(data)

    def __iadd__(self, data: i8):
        self += str(data)

    def __iadd__(self, data: i16):
        self += str(data)

    def __iadd__(self, data: i32):
        self += str(data)

    def __iadd__(self, data: i64):
        self += str(data)

    def __iadd__(self, data: u8):
        self += str(data)

    def __iadd__(self, data: u16):
        self += str(data)

    def __iadd__(self, data: u32):
        self += str(data)

    def __iadd__(self, data: u64):
        self += str(data)

    def to_string(self) -> string:
        """Returns a string of current data.

        """

        return "".join([str(ch) for ch in self._data])

    def __len__(self) -> u64:
        """Get current string length.

        """

        return len(self._data)

    def clear(self):
        """Clear everything.

        """

        self._data = []

    def clear_from(self, offset: u64):
        """Clear everything after given offset.

        """

        while len(self) > offset:
            self._data.pop()

class StringReader:
    _data: string
    _pos: u64

    def __init__(self, data: string):
        if data is None:
            data = ""

        self._data = data
        self._pos = 0

    def available(self) -> u64:
        return len(self._data) - self._pos

    def get(self) -> char:
        if self.available() == 0:
            return ''

        self._pos += 1

        return self._data[self._pos - 1]

    def peek(self) -> char:
        if self.available() == 0:
            return ''

        return self._data[self._pos]

    def read(self, size: i64 = -1) -> string:
        if self.available() == 0:
            data = ""
        elif size == -1:
            data = self._data[self._pos:]
            self._pos = len(self._data)
        else:
            data = self._data[i64(self._pos):i64(self._pos) + size]
            self._pos += len(data)

        return data

@test
def test_empty():
    assert StringBuilder().to_string() == ""

@test
def test_append():
    numbers = StringBuilder()
    numbers += "string"
    numbers += " "
    numbers += i8(-1)
    numbers += " "
    numbers += i16(-2)
    numbers += " "
    numbers += i32(-3)
    numbers += " "
    numbers += i64(-4)
    numbers += " "
    numbers += u8(1)
    numbers += " "
    numbers += u16(2)
    numbers += " "
    numbers += u32(3)
    numbers += " "
    numbers += u64(4)
    numbers += " "
    numbers += 'C'

    assert numbers.to_string() == "string -1 -2 -3 -4 1 2 3 4 C"

@test
def test_clear():
    numbers = StringBuilder()
    numbers += "foo"
    assert numbers.to_string() == "foo"

    numbers.clear()
    assert numbers.to_string() == ""

@test
def test_clear_from_and_length():
    numbers = StringBuilder()
    assert len(numbers) == 0
    numbers.clear_from(1)
    assert len(numbers) == 0

    numbers += "foo"
    assert numbers.to_string() == "foo"
    assert len(numbers) == 3

    numbers.clear_from(1)
    assert numbers.to_string() == "f"
    assert len(numbers) == 1

    numbers += "a"
    assert numbers.to_string() == "fa"

    numbers.clear_from(0)
    assert numbers.to_string() == ""
    assert len(numbers) == 0

    numbers += "apa"
    assert numbers.to_string() == "apa"
    assert len(numbers) == 3

@test
def test_empty_string_reader():
    reader = StringReader("")
    assert reader.get() == ''
    assert reader.read(1) == ""
    assert reader.read() == ""

@test
def test_string_reader():
    reader = StringReader("kalle kula")
    assert reader.peek() == 'k'
    assert reader.get() == 'k'
    assert reader.get() == 'a'
    assert reader.read(3) == "lle"
    assert reader.get() == ' '
    assert reader.read() == "kula"
    assert reader.get() == ''
    assert reader.peek() == ''
    assert reader.read() == ""
    assert reader.read(100) == ""
