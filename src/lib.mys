class StringError(Error):
    message: string

class StringBuilder:
    """Easily create a string from strings and numbers.

    """

    _data: [char]

    func __init__(self):
        self._data = []

    func __iadd__(self, data: string):
        """Append given string.

        """

        if data is None:
            return

        for ch in data:
            self += ch

    func __iadd__(self, data: char):
        """Append given character.

        """

        self._data.append(data)

    func __iadd__(self, data: i8):
        """Append given interger.

        """

        self += str(data)

    func __iadd__(self, data: i16):
        """Append given interger.

        """

        self += str(data)

    func __iadd__(self, data: i32):
        """Append given interger.

        """

        self += str(data)

    func __iadd__(self, data: i64):
        """Append given interger.

        """

        self += str(data)

    func __iadd__(self, data: u8):
        """Append given unsigned interger.

        """

        self += str(data)

    func __iadd__(self, data: u16):
        """Append given unsigned interger.

        """

        self += str(data)

    func __iadd__(self, data: u32):
        """Append given unsigned interger.

        """

        self += str(data)

    func __iadd__(self, data: u64):
        """Append given unsigned interger.

        """

        self += str(data)

    func to_string(self) -> string:
        """Returns a string of current data.

        """

        a = [str(ch) for ch in self._data]

        return "".join(a)

    func length(self) -> i64:
        """Get current string length.

        """

        return self._data.length()

    func clear(self):
        """Clear everything.

        """

        self._data = []

    func clear_from(self, offset: i64):
        """Clear everything after given offset.

        """

        while self.length() > offset:
            self._data.pop()

class StringReader:
    """A string reader.

    """

    _data: string
    _pos: i64

    func __init__(self, data: string):
        if data is None:
            data = ""

        self._data = data
        self._pos = 0

    func available(self) -> i64:
        """Returns number of available characters.

        """

        return self._data.length() - self._pos

    func seek(self, pos: i64):
        """Seek given position relative to the beginning of the string.

        """

        if pos > self._data.length():
            pos = self._data.length()

        self._pos = pos

    func tell(self) -> i64:
        """Tell current position in the string.

        """

        return self._pos

    func get(self) -> char:
        """Get the next character. Returns '' if there are no more characters
        available.

        """

        if self.available() == 0:
            return ''

        self._pos += 1

        return self._data[self._pos - 1]

    func peek(self) -> char:
        """Peek at the next character.

        """

        if self.available() == 0:
            return ''

        return self._data[self._pos]

    func read(self, size: i64 = -1) -> string:
        """Read zero or more characters. Give size as -1 to read everything.

        """

        if self.available() == 0:
            data = ""
        elif size == -1:
            data = self._data[self._pos:]
            self._pos = self._data.length()
        else:
            data = self._data[self._pos:self._pos + size]
            self._pos += data.length()

        return data

    func unget(self):
        """Unget last character.

        """

        if self._pos > 0:
            self._pos -= 1

class _Pretty:
    _builder: StringBuilder
    _reader: StringReader
    _width: i64
    _indent: i64
    _current_line_length: i64

    func __init__(self, width: i64 = 80):
        self._builder = StringBuilder()
        self._reader = None
        self._width = width

    func _find_string_and_char_end(self, begin_ch: char):
        while True:
            ch = self._reader.get()

            if ch == begin_ch:
                break

            if ch == '\\':
                ch = self._reader.get()

            if ch == '':
                raise StringError(f"out of data when searching for '{begin_ch}'")

    func _find_end(self, begin_ch: char, end_ch: char) -> i64:
        begin_pos = self._reader.tell()
        level = 1

        while True:
            ch = self._reader.get()

            if ch == begin_ch:
                level += 1
            elif ch == end_ch:
                level -= 1
            elif ch == '"':
                self._find_string_and_char_end(ch)
            elif ch == '\'':
                self._find_string_and_char_end(ch)
            elif ch == '':
                raise StringError(f"out of data when searching for '{end_ch}'")

            if level == 0 and ch == end_ch:
                break

        end_pos = self._reader.tell()
        self._reader.seek(begin_pos)

        return end_pos - begin_pos

    func _process_bracket_and_paren_begin(self, begin_ch: char, end_ch: char):
        width = self._find_end(begin_ch, end_ch)

        if (width + self._indent + self._current_line_length) < 80:
            self._builder += begin_ch
            self._builder += self._reader.read(i64(width))
            self._current_line_length += width
        else:
            self._builder += begin_ch
            self._builder += '\n'
            self._current_line_length = 0
            self._indent += 4
            self._builder += "".join([" " for _ in range(i64(self._indent))])

    func _process_bracket_begin(self):
        self._process_bracket_and_paren_begin('[', ']')

    func _process_bracket_end(self):
        self._indent -= 4
        self._builder += '\n'
        self._builder += "".join([" " for _ in range(i64(self._indent))])
        self._builder += ']'
        self._current_line_length = 1

    func _process_paren_begin(self):
        self._process_bracket_and_paren_begin('(', ')')

    func _process_paren_end(self):
        self._indent -= 4
        self._builder += ')'
        self._current_line_length += 1

    func _process_string_and_char(self, begin_ch: char):
        self._builder += begin_ch

        while True:
            ch = self._reader.get()

            if ch == begin_ch:
                self._builder += ch
                self._current_line_length += 1
                break

            if ch == '\\':
                self._builder += ch
                self._current_line_length += 1
                ch = self._reader.get()

            if ch == '':
                raise StringError(f"out of data when searching for '{begin_ch}'")

            self._builder += ch
            self._current_line_length += 1

    func _process_comma(self):
        self._builder += ",\n"
        self._current_line_length = 0
        self._builder += "".join([" " for _ in range(i64(self._indent))])

    func process(self, data: string) -> string:
        self._builder.clear()
        self._reader = StringReader(data)
        self._indent = 0
        self._current_line_length = 0

        while True:
            ch = self._reader.get()

            match ch:
                case '[':
                    self._process_bracket_begin()
                case ']':
                    self._process_bracket_end()
                case '(':
                    self._process_paren_begin()
                case ')':
                    self._process_paren_end()
                case '"':
                    self._process_string_and_char(ch)
                case '\'':
                    self._process_string_and_char(ch)
                case ',':
                    self._process_comma()
                case ' ':
                    pass
                case '':
                    break
                case _:
                    self._builder += ch
                    self._current_line_length += 1

        return self._builder.to_string()

func pretty(data: string) -> string:
    """Try to make given object dump string pretty by inserting newlines
    and indentations based on brackets, parentheses, strings,
    characters and commas.

    """

    return _Pretty().process(data)

func indent(text: string, prefix: string = "    ") -> string:
    """Add given prefix to the beginning of given lines.

    The prefix is added to all lines that do not consist solely of
    whitespace.

    """

    lines: [string] = []

    for line in text.split("\n"):
        if line.is_space() or line == "":
            lines.append(line)
        else:
            lines.append(prefix + line)

    return "\n".join(lines)

func join_or(items: [string]) -> string:
    """Join all items in given list as "item1, item2, item3 or item4".

    """

    return _join_delimited(items, "or")

func join_and(items: [string]) -> string:
    """Join all items in given list as "item1, item2, item3 and item4".

    """

    return _join_delimited(items, "and")

func _join_delimited(items: [string], last_delim: string) -> string:
    if items.length() == 0:
        return ""
    elif items.length() == 1:
        return items[0]
    else:
        joined = StringBuilder()

        for i, item in enumerate(slice(items, 0, -1)):
            if i > 0:
                joined += ", "

            joined += item

        joined += ' '
        joined += last_delim
        joined += ' '
        joined += items[-1]

        return joined.to_string()

test empty():
    assert StringBuilder().to_string() == ""

test append():
    numbers = StringBuilder()
    numbers += "string"
    numbers += " "
    numbers += i8(-1)
    numbers += " "
    numbers += i16(-2)
    numbers += " "
    numbers += i32(-3)
    numbers += " "
    numbers += i64(-4)
    numbers += " "
    numbers += u8(1)
    numbers += " "
    numbers += u16(2)
    numbers += " "
    numbers += u32(3)
    numbers += " "
    numbers += u64(4)
    numbers += " "
    numbers += 'C'

    assert numbers.to_string() == "string -1 -2 -3 -4 1 2 3 4 C"

test clear():
    numbers = StringBuilder()
    numbers += "foo"
    assert numbers.to_string() == "foo"

    numbers.clear()
    assert numbers.to_string() == ""

test clear_from_and_length():
    numbers = StringBuilder()
    assert numbers.length() == 0
    numbers.clear_from(1)
    assert numbers.length() == 0

    numbers += "foo"
    assert numbers.to_string() == "foo"
    assert numbers.length() == 3

    numbers.clear_from(1)
    assert numbers.to_string() == "f"
    assert numbers.length() == 1

    numbers += "a"
    assert numbers.to_string() == "fa"

    numbers.clear_from(0)
    assert numbers.to_string() == ""
    assert numbers.length() == 0

    numbers += "apa"
    assert numbers.to_string() == "apa"
    assert numbers.length() == 3

test empty_string_reader():
    reader = StringReader("")
    assert reader.get() == ''
    assert reader.read(1) == ""
    assert reader.read() == ""

test string_reader():
    reader = StringReader("kalle kula")
    assert reader.peek() == 'k'
    assert reader.get() == 'k'
    assert reader.get() == 'a'
    assert reader.read(3) == "lle"
    assert reader.get() == ' '
    assert reader.read() == "kula"
    assert reader.get() == ''
    assert reader.peek() == ''
    assert reader.read() == ""
    assert reader.read(100) == ""
    reader.unget()
    assert reader.available() == 1
    assert reader.get() == 'a'
    assert reader.get() == ''

test pretty_tokens():
    assert pretty(
        "[ParenToken(value='('), NameToken(value=\"add\"), NumberToken(value=\"2\"),"
        " ParenToken(value='('), NameToken(value=\"subtract\"), NumberToken(value=\""
        "4\"), NumberToken(value=\"2\"), ParenToken(value=')'), ParenToken(value=')'"
        ")]") == ("[\n"
                  "    ParenToken(value='('),\n"
                  "    NameToken(value=\"add\"),\n"
                  "    NumberToken(value=\"2\"),\n"
                  "    ParenToken(value='('),\n"
                  "    NameToken(value=\"subtract\"),\n"
                  "    NumberToken(value=\"4\"),\n"
                  "    NumberToken(value=\"2\"),\n"
                  "    ParenToken(value=')'),\n"
                  "    ParenToken(value=')')\n"
                  "]")

test pretty_tokens_2():
    assert pretty(
        "[ParenToken(value='\\''), NameToken(value=\"add\"), NumberToken(value=\"2\"),"
        " ParenToken(value='('), NameToken(value=\"subtract\"), NumberToken(value=\""
        "4\"), NumberToken(value=\"2\"), ParenToken(value=')'), ParenToken(value=')'"
        ")]") == ("[\n"
                  "    ParenToken(value='\\''),\n"
                  "    NameToken(value=\"add\"),\n"
                  "    NumberToken(value=\"2\"),\n"
                  "    ParenToken(value='('),\n"
                  "    NameToken(value=\"subtract\"),\n"
                  "    NumberToken(value=\"4\"),\n"
                  "    NumberToken(value=\"2\"),\n"
                  "    ParenToken(value=')'),\n"
                  "    ParenToken(value=')')\n"
                  "]")

test pretty_ast():
    assert pretty(
        "ProgramNode(body=[CallExpressionNode(name=\"add\", params=[NumberLiteralNod"
        "e(value=\"2\"), CallExpressionNode(name=\"subtract\", params=[NumberLiteral"
        "Node(value=\"4\"), NumberLiteralNode(value=\"2\")])])])") == (
            "ProgramNode(\n"
            "    body=[\n"
            "        CallExpressionNode(\n"
            "            name=\"add\",\n"
            "            params=[\n"
            "                NumberLiteralNode(value=\"2\"),\n"
            "                CallExpressionNode(\n"
            "                    name=\"subtract\",\n"
            "                    params=[\n"
            "                        NumberLiteralNode(value=\"4\"),\n"
            "                        NumberLiteralNode(value=\"2\")\n"
            "                    ])\n"
            "            ])\n"
            "    ])")

test pretty_ast_2():
    assert pretty(
        "ProgramNode(body=[CallExpressionNode(name=\"a[)\", params=[NumberLiteralNod"
        "e(value=\"2\"), CallExpressionNode(name=\"subt'act\", params=[NumberLiteral"
        "Node(value=\"4\")])])])") == (
            "ProgramNode(\n"
            "    body=[\n"
            "        CallExpressionNode(\n"
            "            name=\"a[)\",\n"
            "            params=[\n"
            "                NumberLiteralNode(value=\"2\"),\n"
            "                CallExpressionNode(\n"
            "                    name=\"subt'act\",\n"
            "                    params=[NumberLiteralNode(value=\"4\")])\n"
            "            ])\n"
            "    ])")

test pretty_long_string():
    data = (
        "\"12345678901234567890123456789012345678901234567890123456789012345678901"
        "23456789012345678901234567890\"")
    assert pretty(data) == data

test pretty_long_name():
    assert pretty(
        "12345678901234567890123456789012345678901234567890123456789012345678901"
        "23456789012345678901234567890()") == (
            "1234567890123456789012345678901234567890123456789012345678901234567"
            "890123456789012345678901234567890(\n"
            "    )")

test pretty_short():
    data = "a(b=(1, 3, 'a'), c=[])"
    assert pretty(data) == data

test pretty_char_error():
    try:
        message = ""
        pretty("'''")
    except StringError as e:
        message = e.message

    assert message == "out of data when searching for '''"

test indent_empty_string():
    assert indent("", "    ") == ""

test indent_ending_with_newline():
    text = ("1\n"
            "2\n"
            "\n"
            "4\n")
    assert indent(text, "    ") == ("    1\n"
                                    "    2\n"
                                    "\n"
                                    "    4\n")

test indent_whitespace_in_line():
    text = ("\t\n"
            "1\n"
            " \n"
            "4")
    assert indent(text, "XXX") == ("\t\n"
                                   "XXX1\n"
                                   " \n"
                                   "XXX4")

test big():
    s = StringBuilder()

    for _ in range(1000):
        s += "0123456789"

    print(s.length(), flush=True)
    print(s.to_string().length(), flush=True)

test join_or():
    assert join_or([]) == ""
    assert join_or([""]) == ""
    assert join_or(["a"]) == "a"
    assert join_or(["a", "b"]) == "a or b"
    assert join_or(["1", "2", "3"]) == "1, 2 or 3"
    assert join_or(["1", "2", "3", "4"]) == "1, 2, 3 or 4"

test join_and():
    assert join_and([]) == ""
    assert join_and([""]) == ""
    assert join_and(["a"]) == "a"
    assert join_and(["a", "b"]) == "a and b"
    assert join_and(["1", "2", "3"]) == "1, 2 and 3"
    assert join_and(["1", "2", "3", "4"]) == "1, 2, 3 and 4"
